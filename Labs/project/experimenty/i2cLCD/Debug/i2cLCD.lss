
i2cLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000003ec  00000480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800124  00800124  000004a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000106b  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000997  00000000  00000000  0000166f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f2  00000000  00000000  00002006  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  000028f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000536  00000000  00000000  00002b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000856  00000000  00000000  0000305a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000038b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 32       	cpi	r26, 0x27	; 39
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 75 01 	call	0x2ea	; 0x2ea <main>
  9e:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_WRITESEQ>:

void lcd_data(unsigned char data)

{

    wr_lcd_mode(data, 1);
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	7b 01       	movw	r14, r22
  b4:	14 2f       	mov	r17, r20
  b6:	88 0f       	add	r24, r24
  b8:	0e 94 b2 01 	call	0x364	; 0x364 <i2c_start>
  bc:	81 11       	cpse	r24, r1
  be:	12 c0       	rjmp	.+36     	; 0xe4 <I2C_WRITESEQ+0x3e>
  c0:	11 23       	and	r17, r17
  c2:	91 f0       	breq	.+36     	; 0xe8 <I2C_WRITESEQ+0x42>
  c4:	e7 01       	movw	r28, r14
  c6:	11 50       	subi	r17, 0x01	; 1
  c8:	01 2f       	mov	r16, r17
  ca:	10 e0       	ldi	r17, 0x00	; 0
  cc:	0f 5f       	subi	r16, 0xFF	; 255
  ce:	1f 4f       	sbci	r17, 0xFF	; 255
  d0:	0e 0d       	add	r16, r14
  d2:	1f 1d       	adc	r17, r15
  d4:	89 91       	ld	r24, Y+
  d6:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <i2c_write>
  da:	c0 17       	cp	r28, r16
  dc:	d1 07       	cpc	r29, r17
  de:	d1 f7       	brne	.-12     	; 0xd4 <I2C_WRITESEQ+0x2e>
  e0:	c0 e0       	ldi	r28, 0x00	; 0
  e2:	03 c0       	rjmp	.+6      	; 0xea <I2C_WRITESEQ+0x44>
  e4:	c1 e0       	ldi	r28, 0x01	; 1
  e6:	01 c0       	rjmp	.+2      	; 0xea <I2C_WRITESEQ+0x44>
  e8:	c0 e0       	ldi	r28, 0x00	; 0
  ea:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <i2c_stop>
  ee:	8c 2f       	mov	r24, r28
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	1f 91       	pop	r17
  f6:	0f 91       	pop	r16
  f8:	ff 90       	pop	r15
  fa:	ef 90       	pop	r14
  fc:	08 95       	ret

000000fe <wr_lcd_mode>:
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	00 d0       	rcall	.+0      	; 0x108 <wr_lcd_mode+0xa>
 108:	00 d0       	rcall	.+0      	; 0x10a <wr_lcd_mode+0xc>
 10a:	1f 92       	push	r1
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
 110:	08 2f       	mov	r16, r24
 112:	68 30       	cpi	r22, 0x08	; 8
 114:	71 f4       	brne	.+28     	; 0x132 <wr_lcd_mode+0x34>
 116:	81 11       	cpse	r24, r1
 118:	02 c0       	rjmp	.+4      	; 0x11e <wr_lcd_mode+0x20>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	01 c0       	rjmp	.+2      	; 0x120 <wr_lcd_mode+0x22>
 11e:	88 e0       	ldi	r24, 0x08	; 8
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 124:	41 e0       	ldi	r20, 0x01	; 1
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	71 e0       	ldi	r23, 0x01	; 1
 12a:	87 e2       	ldi	r24, 0x27	; 39
 12c:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_WRITESEQ>
 130:	26 c0       	rjmp	.+76     	; 0x17e <wr_lcd_mode+0x80>
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 136:	16 2f       	mov	r17, r22
 138:	18 2b       	or	r17, r24
 13a:	19 83       	std	Y+1, r17	; 0x01
 13c:	80 2f       	mov	r24, r16
 13e:	80 7f       	andi	r24, 0xF0	; 240
 140:	84 60       	ori	r24, 0x04	; 4
 142:	81 2b       	or	r24, r17
 144:	8a 83       	std	Y+2, r24	; 0x02
 146:	8b 7f       	andi	r24, 0xFB	; 251
 148:	8b 83       	std	Y+3, r24	; 0x03
 14a:	20 e1       	ldi	r18, 0x10	; 16
 14c:	02 9f       	mul	r16, r18
 14e:	c0 01       	movw	r24, r0
 150:	11 24       	eor	r1, r1
 152:	81 2b       	or	r24, r17
 154:	84 60       	ori	r24, 0x04	; 4
 156:	8c 83       	std	Y+4, r24	; 0x04
 158:	8b 7f       	andi	r24, 0xFB	; 251
 15a:	8d 83       	std	Y+5, r24	; 0x05
 15c:	45 e0       	ldi	r20, 0x05	; 5
 15e:	be 01       	movw	r22, r28
 160:	6f 5f       	subi	r22, 0xFF	; 255
 162:	7f 4f       	sbci	r23, 0xFF	; 255
 164:	87 e2       	ldi	r24, 0x27	; 39
 166:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_WRITESEQ>
 16a:	10 fd       	sbrc	r17, 0
 16c:	08 c0       	rjmp	.+16     	; 0x17e <wr_lcd_mode+0x80>
 16e:	03 30       	cpi	r16, 0x03	; 3
 170:	30 f4       	brcc	.+12     	; 0x17e <wr_lcd_mode+0x80>
 172:	e3 ef       	ldi	r30, 0xF3	; 243
 174:	f1 e0       	ldi	r31, 0x01	; 1
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <wr_lcd_mode+0x78>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <wr_lcd_mode+0x7e>
 17c:	00 00       	nop
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	08 95       	ret

00000192 <lcd_gotoxy>:
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	d8 2f       	mov	r29, r24
 198:	c6 2f       	mov	r28, r22
 19a:	e6 2f       	mov	r30, r22
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	ef 5f       	subi	r30, 0xFF	; 255
 1a0:	fe 4f       	sbci	r31, 0xFE	; 254
 1a2:	98 2f       	mov	r25, r24
 1a4:	90 68       	ori	r25, 0x80	; 128
 1a6:	80 81       	ld	r24, Z
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	89 2b       	or	r24, r25
 1ac:	0e 94 7f 00 	call	0xfe	; 0xfe <wr_lcd_mode>
 1b0:	d0 93 25 01 	sts	0x0125, r29	; 0x800125 <_lcd_x>
 1b4:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <_lcd_y>
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <lcd_clrscr>:
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 7f 00 	call	0xfe	; 0xfe <wr_lcd_mode>
 1c6:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <_lcd_y>
 1ca:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <_lcd_x>
 1ce:	08 95       	ret

000001d0 <lcd_putc>:
 1d0:	cf 93       	push	r28
 1d2:	c8 2f       	mov	r28, r24
 1d4:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <_lcd_x>
 1d8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 1dc:	98 17       	cp	r25, r24
 1de:	18 f4       	brcc	.+6      	; 0x1e6 <lcd_putc+0x16>
 1e0:	ca 30       	cpi	r28, 0x0A	; 10
 1e2:	59 f4       	brne	.+22     	; 0x1fa <lcd_putc+0x2a>
 1e4:	14 c0       	rjmp	.+40     	; 0x20e <lcd_putc+0x3e>
 1e6:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <_lcd_y>
 1ea:	6f 5f       	subi	r22, 0xFF	; 255
 1ec:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <_lcd_y>
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_gotoxy>
 1f6:	ca 30       	cpi	r28, 0x0A	; 10
 1f8:	91 f0       	breq	.+36     	; 0x21e <lcd_putc+0x4e>
 1fa:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <_lcd_x>
 1fe:	8f 5f       	subi	r24, 0xFF	; 255
 200:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_lcd_x>
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	8c 2f       	mov	r24, r28
 208:	0e 94 7f 00 	call	0xfe	; 0xfe <wr_lcd_mode>
 20c:	08 c0       	rjmp	.+16     	; 0x21e <lcd_putc+0x4e>
 20e:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <_lcd_y>
 212:	6f 5f       	subi	r22, 0xFF	; 255
 214:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <_lcd_y>
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_gotoxy>
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <lcd_puts>:
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	ec 01       	movw	r28, r24
 228:	88 81       	ld	r24, Y
 22a:	88 23       	and	r24, r24
 22c:	31 f0       	breq	.+12     	; 0x23a <lcd_puts+0x18>
 22e:	21 96       	adiw	r28, 0x01	; 1
 230:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_putc>
 234:	89 91       	ld	r24, Y+
 236:	81 11       	cpse	r24, r1
 238:	fb cf       	rjmp	.-10     	; 0x230 <lcd_puts+0xe>
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <lcd_init>:

// initialize the LCD controller

void lcd_init(unsigned char command)

{
 240:	df 92       	push	r13
 242:	ef 92       	push	r14
 244:	ff 92       	push	r15
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	00 d0       	rcall	.+0      	; 0x250 <lcd_init+0x10>
 250:	00 d0       	rcall	.+0      	; 0x252 <lcd_init+0x12>
 252:	00 d0       	rcall	.+0      	; 0x254 <lcd_init+0x14>
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
 258:	d8 2e       	mov	r13, r24

    // High-Nibble von Byte 8 = Display Control:

    // 1DCB****  D: Disp on/off; C: Cursor on/off  B: blink on/off

    char init_sequenz[] = { 0x33, 0x32, 0x28, 0x0C, 0x06, 0x01 };
 25a:	86 e0       	ldi	r24, 0x06	; 6
 25c:	e5 e0       	ldi	r30, 0x05	; 5
 25e:	f1 e0       	ldi	r31, 0x01	; 1
 260:	de 01       	movw	r26, r28
 262:	11 96       	adiw	r26, 0x01	; 1
 264:	01 90       	ld	r0, Z+
 266:	0d 92       	st	X+, r0
 268:	8a 95       	dec	r24
 26a:	e1 f7       	brne	.-8      	; 0x264 <lcd_init+0x24>

    _lcd_maxx = LCD_DISP_LENGTH;
 26c:	80 e1       	ldi	r24, 0x10	; 16
 26e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>

    _base_y[2] = _base_y[0] + _lcd_maxx;
 272:	e1 e0       	ldi	r30, 0x01	; 1
 274:	f1 e0       	ldi	r31, 0x01	; 1
 276:	80 81       	ld	r24, Z
 278:	80 5f       	subi	r24, 0xF0	; 240
 27a:	82 83       	std	Z+2, r24	; 0x02

    _base_y[3] = _base_y[1] + _lcd_maxx;
 27c:	81 81       	ldd	r24, Z+1	; 0x01
 27e:	80 5f       	subi	r24, 0xF0	; 240
 280:	83 83       	std	Z+3, r24	; 0x03

    I2C_INIT();
 282:	0e 94 ac 01 	call	0x358	; 0x358 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 286:	8b e4       	ldi	r24, 0x4B	; 75
 288:	9d e1       	ldi	r25, 0x1D	; 29
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_init+0x4a>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <lcd_init+0x50>
 290:	00 00       	nop
 292:	8e 01       	movw	r16, r28
 294:	0f 5f       	subi	r16, 0xFF	; 255
 296:	1f 4f       	sbci	r17, 0xFF	; 255
 298:	7e 01       	movw	r14, r28
 29a:	97 e0       	ldi	r25, 0x07	; 7
 29c:	e9 0e       	add	r14, r25
 29e:	f1 1c       	adc	r15, r1

    _delay_ms(30);               // 30 ms Delay nach power-up

    for (i = 0; i < sizeof(init_sequenz); i++) {

        wr_lcd_mode(init_sequenz[i], 0);
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	f8 01       	movw	r30, r16
 2a4:	81 91       	ld	r24, Z+
 2a6:	8f 01       	movw	r16, r30
 2a8:	0e 94 7f 00 	call	0xfe	; 0xfe <wr_lcd_mode>
 2ac:	81 ee       	ldi	r24, 0xE1	; 225
 2ae:	94 e0       	ldi	r25, 0x04	; 4
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <lcd_init+0x70>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <lcd_init+0x76>
 2b6:	00 00       	nop

    I2C_INIT();

    _delay_ms(30);               // 30 ms Delay nach power-up

    for (i = 0; i < sizeof(init_sequenz); i++) {
 2b8:	0e 15       	cp	r16, r14
 2ba:	1f 05       	cpc	r17, r15
 2bc:	89 f7       	brne	.-30     	; 0x2a0 <lcd_init+0x60>

        _delay_ms(5);

    }

	wr_lcd_mode(command, 0);
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	8d 2d       	mov	r24, r13
 2c2:	0e 94 7f 00 	call	0xfe	; 0xfe <wr_lcd_mode>

}
 2c6:	26 96       	adiw	r28, 0x06	; 6
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	f8 94       	cli
 2cc:	de bf       	out	0x3e, r29	; 62
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	cd bf       	out	0x3d, r28	; 61
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	ff 90       	pop	r15
 2dc:	ef 90       	pop	r14
 2de:	df 90       	pop	r13
 2e0:	08 95       	ret

000002e2 <lcd_backlight>:

void lcd_backlight(char on)

{

    wr_lcd_mode(on, 8);
 2e2:	68 e0       	ldi	r22, 0x08	; 8
 2e4:	0e 94 7f 00 	call	0xfe	; 0xfe <wr_lcd_mode>
 2e8:	08 95       	ret

000002ea <main>:

int main(void)

{

    lcd_init(LCD_ON_DISPLAY);
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	0e 94 20 01 	call	0x240	; 0x240 <lcd_init>

	lcd_backlight(0);
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_backlight>
 2f6:	2f ef       	ldi	r18, 0xFF	; 255
 2f8:	89 e6       	ldi	r24, 0x69	; 105
 2fa:	98 e1       	ldi	r25, 0x18	; 24
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <main+0x12>
 304:	00 c0       	rjmp	.+0      	; 0x306 <main+0x1c>
 306:	00 00       	nop

	_delay_ms(500);

	lcd_backlight(1);
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_backlight>
 30e:	2f ef       	ldi	r18, 0xFF	; 255
 310:	89 e6       	ldi	r24, 0x69	; 105
 312:	98 e1       	ldi	r25, 0x18	; 24
 314:	21 50       	subi	r18, 0x01	; 1
 316:	80 40       	sbci	r24, 0x00	; 0
 318:	90 40       	sbci	r25, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <main+0x2a>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <main+0x34>
 31e:	00 00       	nop

	while(1)

    {

        lcd_clrscr();
 320:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clrscr>

		

		lcd_gotoxy(1, 1);
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_gotoxy>

		lcd_puts("Second Line");
 32c:	8b e0       	ldi	r24, 0x0B	; 11
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 11 01 	call	0x222	; 0x222 <lcd_puts>
 334:	2f ef       	ldi	r18, 0xFF	; 255
 336:	83 ed       	ldi	r24, 0xD3	; 211
 338:	90 e3       	ldi	r25, 0x30	; 48
 33a:	21 50       	subi	r18, 0x01	; 1
 33c:	80 40       	sbci	r24, 0x00	; 0
 33e:	90 40       	sbci	r25, 0x00	; 0
 340:	e1 f7       	brne	.-8      	; 0x33a <main+0x50>
 342:	00 c0       	rjmp	.+0      	; 0x344 <main+0x5a>
 344:	00 00       	nop

		_delay_ms(1000);
		lcd_gotoxy(1, 0);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_gotoxy>

		lcd_puts("Hello World");
 34e:	87 e1       	ldi	r24, 0x17	; 23
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	0e 94 11 01 	call	0x222	; 0x222 <lcd_puts>
 356:	e4 cf       	rjmp	.-56     	; 0x320 <main+0x36>

00000358 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 358:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 35c:	8c e0       	ldi	r24, 0x0C	; 12
 35e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 362:	08 95       	ret

00000364 <i2c_start>:
 364:	94 ea       	ldi	r25, 0xA4	; 164
 366:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 36a:	ec eb       	ldi	r30, 0xBC	; 188
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	90 81       	ld	r25, Z
 370:	99 23       	and	r25, r25
 372:	ec f7       	brge	.-6      	; 0x36e <i2c_start+0xa>
 374:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 378:	98 7f       	andi	r25, 0xF8	; 248
 37a:	98 30       	cpi	r25, 0x08	; 8
 37c:	11 f0       	breq	.+4      	; 0x382 <i2c_start+0x1e>
 37e:	90 31       	cpi	r25, 0x10	; 16
 380:	a1 f4       	brne	.+40     	; 0x3aa <i2c_start+0x46>
 382:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 386:	84 e8       	ldi	r24, 0x84	; 132
 388:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 38c:	ec eb       	ldi	r30, 0xBC	; 188
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	88 23       	and	r24, r24
 394:	ec f7       	brge	.-6      	; 0x390 <i2c_start+0x2c>
 396:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 39a:	98 7f       	andi	r25, 0xF8	; 248
 39c:	98 31       	cpi	r25, 0x18	; 24
 39e:	39 f0       	breq	.+14     	; 0x3ae <i2c_start+0x4a>
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 34       	cpi	r25, 0x40	; 64
 3a4:	29 f4       	brne	.+10     	; 0x3b0 <i2c_start+0x4c>
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	08 95       	ret
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	08 95       	ret
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	08 95       	ret

000003b2 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 3b2:	84 e9       	ldi	r24, 0x94	; 148
 3b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 3b8:	ec eb       	ldi	r30, 0xBC	; 188
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	84 fd       	sbrc	r24, 4
 3c0:	fd cf       	rjmp	.-6      	; 0x3bc <i2c_stop+0xa>

}/* i2c_stop */
 3c2:	08 95       	ret

000003c4 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 3c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
 3c8:	84 e8       	ldi	r24, 0x84	; 132
 3ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 3ce:	ec eb       	ldi	r30, 0xBC	; 188
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	88 23       	and	r24, r24
 3d6:	ec f7       	brge	.-6      	; 0x3d2 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 3d8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 3dc:	98 7f       	andi	r25, 0xF8	; 248
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	98 32       	cpi	r25, 0x28	; 40
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <i2c_write+0x22>
 3e4:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 3e6:	08 95       	ret

000003e8 <_exit>:
 3e8:	f8 94       	cli

000003ea <__stop_program>:
 3ea:	ff cf       	rjmp	.-2      	; 0x3ea <__stop_program>
